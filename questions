Questions on session 22:
Exercise 1:     If a Matrix is consequtevly in memory, it should be possible
to construct the MPI datatype with one single invocation of MPI_Type_vector.

Questions to session 19:
In the LU Factorisation we tested ajj ==0 for singularity of the matrix.
Does this make sense or would it be better to test for < eps?
    It's not the task of LU factorisation to handel singular matrices.
    To do so we would want to test heuristically for the condition of a matrix.
    By testing for < eps we would declare a matrix with eps/2 on the diagonal
    to be a singular matrix. But with LU we still can derive it propperly.
    What we could / should do on the devision by ajj:
    if(abs(ajj)< safemin) {
        alpha = 1/ajj;
        scal();
    } else {
        aij <- aij/ajj;
    }

Questions to session 16:
it doesn't make sense to return -1 if the type is std::size_t !

Could we use our blocked gemm algorithm inside trlsm and trusm?
Problem we overwrite B !

Questions to session 14:
How do i implement/overwrite the asignment operator.
- solved the include copy.h with adding forward declarations of the matirx
    classes to isgematrix.h
The return type has to be the same, not void!

Questions to session 12:
downcast from std::complex<double> to std::complex<float> does give no
warning because the complex implementation compresses all warnings!!
dangerous because we could loose precission when implicit typecast happens
unwanted in an algorithm

The function ugemm that gets overloaded once. If the parameters have different
types it looks up to find a template to create it first,
before a typecast is invoced!

The Reference Implementation is used as "the simplest" version that can be
further optimized.

Questions to session 11:

Why do we use an interface?
wouldn't it be better to implement (copy paste) a direct version
to our new matrix class or changing the ones in bench.h ??
E.g. the assertions we have in our Matrix class are not invoced!
-> due to historic reasons. The extra functions calls doen't matter because
the compiler optimizes it away!

How to deal with the warnings about unused parameters?

What if I want to use a function created by a lamda expression more than once?
-> I can define the function as
    auto function = lambda exp.
and use later function with ()
or fuction as function pointer without parantheses

question 1 page 3:
The funcion object is created, when instantiated and ceases to exist, when it's
work is done. Meaning when the funcion gave back the return value.
It is a temporary object living on the stack.

question 2 page 3:
std::random_device()() needs to paares of parantheses because:
with the first we call the constructor,
with the second we make a call to itself to actually produce a uniformly
distributed random number as a seed for mt19937.




Question page 01:
1. the offset of two subsequent array accesses is incRowA * sizeof(double)
    = 1*8 = 8 bytes
2. n * 8 bytes because incRowA = n

3. becaues n > 1000 only one number is taken from each cashline loaded
    in the second case max 64/sizeof(double) = 8
    can be fetched from one cashline.

Session 03:
Question page02:
1. void gemm(size_t m, size_t n, size_t k,
             double alpha,
             const double* A, ptrdiff_t incRowA, ptrdiff_t incColA,
             const double* B, ptrdiff_t incRowB, ptrdiff_t incColB,
             doubel beta,
             double* C, ptrdiff_t incRowC, ptrdiff_t incColc)
